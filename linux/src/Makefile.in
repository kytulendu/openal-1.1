LN_S=@LN_S@
AS=as
CC=@CC@
CPP=/lib/cpp
CFLAGS=@CFLAGS@
DEFINES=@DEFINES@
LDFLAGS=@LDFLAGS@
INC=-I../../include -I../include -Iarch -I. @INCLUDES@
LIBS=-L. @LIBS@
SO_EXT=@SHARED_LIBRARY_EXT@
RANLIB=@RANLIB@
NASM=@NASM@
NASMFLAGS=@NASM_FORMAT@

AL_OBJS=al_able.o       \
	al_bpool.o 	\
	al_buffer.o     \
	al_config.o     \
	al_debug.o      \
	al_distance.o   \
	al_doppler.o    \
	al_error.o      \
	al_ext.o        \
	al_filter.o     \
	al_listen.o     \
	al_main.o       \
	al_mixer.o      \
	al_mixfunc.o    \
	al_mixmanager.o \
	al_mspool.o     \
	al_mutexlib.o   \
	al_queue.o      \
	al_rctree.o     \
	al_rcvar.o      \
	al_source.o 	\
	al_spool.o 	\
	al_state.o      \
	al_threadlib.o  \
	al_vector.o     \
	mixaudio16.o

# Major subgroupings
ALC_OBJS=$(addsuffix .o, $(addprefix alc/alc_, context speaker error device ))
AC_OBJS=$(addsuffix .o, $(addprefix audioconvert/ac_, misc freq bits channels helper adpcm endian))

# extensions that we want compiled in the main so
EXT_OBJS=$(addsuffix .o, $(addprefix extensions/al_ext_, loki mp3 vorbis capture))


# extensions that we do not want compiled in the main so (but can be
# loaded with load-extension via alrc)
EXT_DLL_OBJS=$(addsuffix .o, $(addprefix extensions/al_ext_, ))

x86_OBJS=arch/i386/floatmul.o arch/i386/x86_cpu_caps_prk.o
x86_MMX_OBJS=arch/i386/mixaudio16_mmx_prk.o
x86_NASM_OBJS=arch/i386/x86_cpu_caps_detect_prk.o
x86_MMX_NASM_OBJS=arch/i386/memcpy_mmx_prk.o

PORTABLE_OBJS=arch/portable/floatmul.o arch/portable/cpu_caps.o

# backend specific stuff
INTERFACE_OBJS=arch/interface/interface_sound.o
ARTS_OBJS=arch/arts/arts.o
ALSA_OBJS=arch/alsa/alsa.o
ESD_OBJS=arch/esd/esd.o
SDL_OBJS=arch/sdl/sdl.o
WAVEOUT_OBJS=arch/waveout/waveout.o
NULL_OBJS=arch/null/null.o

BSD_OBJS=arch/bsd/bsd_dsp.o
IRIS_OBJS=arch/irix/iris.o
LIN_OBJS=arch/linux/lin_dsp.o
SOLARIS_OBJS=arch/solaris/solaris_native.o
DARWIN_OBJS=arch/darwin/darwin_native.o
MORPHOS_OBJS=arch/morphos/morphos_native.o arch/morphos/morphos_dispatcher.o
WINDOWS_OBJS=arch/windows/windows_native.o

AL_OBJS+=$(INTERFACE_OBJS) @OS_OBJS@ @ARCH_OBJS@

PACKAGE_VERSION_MAJOR=@PACKAGE_VERSION_MAJOR@
PACKAGE_VERSION=@PACKAGE_VERSION@

SUBDIRS :=
RM_RF := $(RM) -r
CLEAN_FILES := $(AL_OBJS) $(ALC_OBJS) $(AC_OBJS) $(EXT_OBJS) $(EXT_DLL_OBJS) libopenal.a libopenal.$(SO_EXT) libopenal.$(SO_EXT).$(PACKAGE_VERSION_MAJOR) libopenal.$(SO_EXT).$(PACKAGE_VERSION)
DISTCLEAN_FILES := Makefile
MAINTAINER_CLEAN_FILES :=
REPO_CLEAN_FILES :=

%.o : %.s al_siteconfig.h ../config.h
	$(CPP) $(DEFINES) $< | $(AS) -o $@
%.o : %.c al_siteconfig.h ../config.h
	$(CC) $(DEFINES) $(INC) $(CFLAGS) -c $< -o $@
%.o : %.nasm
	$(NASM) $(NASMFLAGS) $< -o $@

%.def : %.a libopenal.a
	dlltool -a $< --output-def $@

all: libopenal.a libopenal.$(SO_EXT) $(EXT_OBJS) $(EXT_DLL_OBJS) $(TEST_PROGS)

libopenal: libopenal.a libopenal.$(SO_EXT)

libopenal.a: $(AL_OBJS) $(ALC_OBJS) $(AC_OBJS) $(EXT_OBJS) $(EXT_DLL_OBJS)
	ar cru libopenal.a \
		$(AL_OBJS)   \
		$(ALC_OBJS)  \
		$(AC_OBJS)   \
		$(EXT_OBJS)
	$(RANLIB) libopenal.a

libopenal.so: libopenal.so.$(PACKAGE_VERSION)
	$(LN_S) -f libopenal.so.$(PACKAGE_VERSION) libopenal.so

libopenal.so.$(PACKAGE_VERSION): $(AL_OBJS) $(ALC_OBJS) $(AC_OBJS) $(EXT_OBJS) $(EXT_DLL_OBJS)
	$(CC) -shared \
		-Wl,"-soname,libopenal.so.$(PACKAGE_VERSION_MAJOR)" \
		-o libopenal.so.$(PACKAGE_VERSION) \
		$(LDFLAGS)     \
		$(AL_OBJS)     \
		$(ALC_OBJS)    \
		$(AC_OBJS)     \
		$(EXT_OBJS)    \
		$(LIBS)

libopenal.dll:  $(AL_OBJS) $(ALC_OBJS) $(AC_OBJS) libopenal.def \
	$(EXT_OBJS) $(EXT_DLL_OBJS)
	dlltool -k --dllname libopenal.dll --output-lib $@ --def libopenal.def

libopenal.dylib: $(AL_OBJS) $(ALC_OBJS) $(AC_OBJS) $(EXT_OBJS) $(EXT_DLL_OBJS)
	$(CC) -dynamiclib -prebind -undefined suppress -flat_namespace -o libopenal.dylib -install_name libopenal.dylib -current_version $(PACKAGE_VERSION) \
		$(LDFLAGS)     \
		$(AL_OBJS)     \
		$(ALC_OBJS)    \
		$(AC_OBJS)     \
		$(EXT_OBJS)    \
		$(LIBS)

$(EXT_OBJS): %.o : %.c ../config.h
	$(CC) $(DEFINES) $(INC) $(CFLAGS) -c $< -o $@

$(EXT_DLL_OBJS): %.o : %.c ../config.h
	$(CC) $(DEFINES) $(INC) -DOPENAL_EXTENSION $(CFLAGS) $< -shared -o $@

clean:
	for i in "" $(SUBDIRS) ; do test -z "$$i" || ( cd $$i && $(MAKE) clean ) done
	$(RM_RF) __rm_food $(CLEAN_FILES)

distclean:
	for i in "" $(SUBDIRS) ; do test -z "$$i" || ( cd $$i && $(MAKE) distclean ) done
	$(RM_RF) __rm_food $(CLEAN_FILES) $(DISTCLEAN_FILES)

maintainer-clean:
	for i in "" $(SUBDIRS) ; do test -z "$$i" || ( cd $$i && $(MAKE) maintainer-clean ) done
	$(RM_RF) __rm_food $(CLEAN_FILES) $(DISTCLEAN_FILES) $(MAINTAINER_CLEAN_FILES)

repo-clean:
	for i in "" $(SUBDIRS) ; do test -z "$$i" || ( cd $$i && $(MAKE) repo-clean ) done
	$(RM_RF) __rm_food $(CLEAN_FILES) $(DISTCLEAN_FILES) $(MAINTAINER_CLEAN_FILES) $(REPO_CLEAN_FILES)

.PHONY: all clean distclean maintainer-clean repo-clean
